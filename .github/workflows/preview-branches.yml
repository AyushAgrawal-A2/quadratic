name: Deploy Preview Branch

on:
  pull_request:


# Use runs on `ubuntu-latest-8-cores`. All of our self hosted runners use this tag.
# Our runners pick up jobs first, and if all our runners are being used or are down
# it will automatically back up to using GitHub hosted runners.


jobs:

  infra:
    name: Create or Update Infrastructure with Pulumi
    runs-on: ubuntu-latest-8-cores 
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - uses: pulumi/actions@v4

    - name: Update Pulumi Infrastructure
      id: pulumiInfra
      working-directory: infra
      run: |
        npm ci
        
        STACK_NAME="preview-pr-${{ env.PR_ID }}"
        if ! pulumi stack ls | grep -q "^$STACK_NAME"; then
          echo "Stack $STACK_NAME does not exist. Initializing..."
          pulumi stack init $STACK_NAME
        else
          echo "Stack $STACK_NAME already exists."
          pulumi stack select $STACK_NAME
        fi

        pulumi config set aws:region us-west-2
        pulumi config set domain quadratic-preview.com
        pulumi config set subdomain ws-preview-${{ env.PR_ID }}

        pulumi up -y
        echo "MULTIPLAYER_INSTANCE_DNS=$(pulumi stack output multiplayerInstanceDns)" >> "$GITHUB_OUTPUT"
        echo "CLIENT_PUBLIC_DNS=$(pulumi stack output clientPublicDns)" >> "$GITHUB_OUTPUT"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        PR_ID: ${{ github.event.pull_request.number }}

    outputs:
      MULTIPLAYER_INSTANCE_DNS: ${{ steps.pulumiInfra.outputs.MULTIPLAYER_INSTANCE_DNS }}
      CLIENT_PUBLIC_DNS: ${{ steps.pulumiInfra.outputs.CLIENT_PUBLIC_DNS }}


  multiplayer_preview:
    needs: infra
    runs-on: ubuntu-latest-8-cores 
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - uses: pulumi/actions@v4

    - name: Set up Rust
      uses: moonrepo/setup-rust@v1
      with:
        components: clippy, llvm-tools-preview
        cache: false
        channel: 'nightly'

    - name: Install pkg-config
      if: github.runner.isHosted == true
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config

    - name: Build quadratic-multiplayer
      working-directory: quadratic-multiplayer
      run: |
        cargo build --release

    - name: Set up SSH Key
      env:
        EC2_KEY_PEM: ${{ secrets.EC2_KEY_PEM }}
      run: |
        mkdir -p ~/.ssh
        echo "$EC2_KEY_PEM" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        # Your SSH-based commands here, e.g., scp, ssh

    - name: Wait for EC2 Availability
      run: |
        timeout=300 # 5 minutes
        elapsed=0
        echo "Checking EC2 instance availability..."
        while ! ssh -o "StrictHostKeyChecking=no" -i ~/.ssh/id_rsa ubuntu@${{needs.infra.outputs.MULTIPLAYER_INSTANCE_DNS}} "echo 'EC2 instance is up and running'" && [ $elapsed -lt $timeout ]; do
          echo "Waiting for EC2 instance to be available..."
          sleep 10
          elapsed=$((elapsed + 10))
        done
        if [ $elapsed -ge $timeout ]; then
          echo "Timeout waiting for EC2 instance to become available"
          exit 1
        fi
        echo "EC2 instance is available"

    - name: Stop Service on EC2
      run: |
        ssh -i ~/.ssh/id_rsa ubuntu@${{needs.infra.outputs.MULTIPLAYER_INSTANCE_DNS}} "sudo systemctl stop quadratic-multiplayer && rm -f /home/ubuntu/quadratic-multiplayer"

    - name: Transfer Build to EC2
      run: | 
        scp -i ~/.ssh/id_rsa quadratic-multiplayer/target/release/quadratic-multiplayer ubuntu@${{needs.infra.outputs.MULTIPLAYER_INSTANCE_DNS}}:/home/ubuntu/

    - name: Restart Service on EC2
      run: |
        ssh -i ~/.ssh/id_rsa ubuntu@${{needs.infra.outputs.MULTIPLAYER_INSTANCE_DNS}} "sudo systemctl start quadratic-multiplayer"

    - name: Verify Service is running on EC2
      run: |
        ssh -i ~/.ssh/id_rsa ubuntu@${{needs.infra.outputs.MULTIPLAYER_INSTANCE_DNS}} "sudo systemctl is-active --quiet quadratic-multiplayer"

  # client_preview:
  #   needs: infra
  #   runs-on: ubuntu-latest-8-cores 
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: actions/setup-node@v4
  #     with:
  #       node-version: 18

  #   - name: Set up Rust
  #     uses: moonrepo/setup-rust@v1
  #     with:
  #       cache: false
  #   - uses: jetli/wasm-pack-action@v0.4.0
  #     with:
  #       version: 'latest'

  #   - name: Build Client
  #     working-directory: quadratic-client
  #     run: |
  #       npm ci
  #       npm run build:wasm:javascript
  #       npm run build:wasm:types
  #       npm run build
  #     env:
  #       VITE_ENVIRONMENT: preview
  #       VITE_QUADRATIC_API_URL: https://quadratic-api-dev-pr-${{ github.event.pull_request.number }}.herokuapp.com
  #       VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
  #       VITE_AUTH0_CLIENT_ID: ${{ secrets.VITE_AUTH0_CLIENT_ID }}
  #       VITE_AUTH0_AUDIENCE: ${{ secrets.VITE_AUTH0_AUDIENCE }}
  #       VITE_AUTH0_ISSUER: ${{ secrets.VITE_AUTH0_ISSUER }}
  #       VITE_AUTH0_DOMAIN: ${{ secrets.VITE_AUTH0_DOMAIN }}

  #   # Set up AWS credentials
  #   - name: Set up AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: your-aws-region

  # # Deploy to S3
  # - name: Deploy to S3
  #   run: |
  #     aws s3 sync ./path-to-your-static-files/ s3://your-s3-bucket-name --delete

  # # Invalidate CloudFront distribution
  # - name: Invalidate CloudFront distribution
  #   run: |
  #     aws cloudfront create-invalidation --distribution-id your-distribution-id --paths "/*"

  # - name: Post Deployment URL to PR
  #   if: github.event_name == 'pull_request'
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     DEPLOY_URL: "https://your-cloudfront-distribution-url.com/prs/${{ github.head_ref }}"
  #   run: |
  #     PR_COMMENT="Deployment is ready! ðŸš€\n\nPreview: $DEPLOY_URL"
  #     PAYLOAD=$(echo '{}' | jq --arg body "$PR_COMMENT" '.body = $body')
  #     COMMENTS_URL=$(jq -r .pull_request.comments_url < "$GITHUB_EVENT_PATH")
  #     curl -s -S -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" --data "$PAYLOAD" "$COMMENTS_URL"
