version: "3.8"

services:
  redis:
    image: redis/redis-stack:latest
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: "5s"
    networks:
      - host

  postgres:
    image: postgres:15
    restart: always
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      PGUSER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - host

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack:latest
    ports:
      - "127.0.0.1:4566:4566" # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559" # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - LOCALSTACK_AUTH_TOKEN=${LOCALSTACK_AUTH_TOKEN:-}
      - DEBUG=${DEBUG:-0}
      - SERVICES=s3:4566
      - HOSTNAME=localstack
      - HOSTNAME_EXTERNAL=localstack
      - DEFAULT_REGION=us-east-2
      - DISABLE_CUSTOM_CORS_S3=true
      - DISABLE_CORS_CHECKS=true
      - EXTRA_CORS_ALLOWED_ORIGINS=*

  aws-cli:
    image: amazon/aws-cli
    depends_on:
      - localstack
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-2
    entrypoint: /bin/sh -c
    command: >
      "
        aws --endpoint-url=http://localstack:4566 s3api create-bucket --bucket quadratic-api-docker --region us-east-1
      "
  quadratic-client:
    build:
      context: .
      dockerfile: quadratic-client/Dockerfile
    env_file:
      - quadratic-client/.env.docker
    restart: "always"
    ports:
      - "3000:3000"
    command: "npm run start"
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - frontend
      - all
    networks:
      - host

  quadratic-api:
    build:
      context: .
      dockerfile: quadratic-api/Dockerfile
    env_file:
      - quadratic-api/.env
      # - quadratic-api/.env.docker
    restart: "always"
    ports:
      - "8000:8000"
    command: "node dist/server.js"
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - backend
      - all
    networks:
      - host

  quadratic-multiplayer:
    build:
      context: .
      dockerfile: quadratic-multiplayer/Dockerfile
      args:
        - binary=quadratic-multiplayer
    env_file:
      - quadratic-multiplayer/.env.docker
    # override env vars here
    environment:
      QUADRATIC_API_URI: http://host.docker.internal:8000
      RUST_LOG: info
    restart: "always"
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      quadratic-api:
        condition: service_started
    profiles:
      - backend
      - quadratic-files-dev
      - all
    networks:
      - host

  quadratic-files:
    build:
      context: .
      dockerfile: quadratic-files/Dockerfile
      args:
        - binary=quadratic-files
    env_file:
      - quadratic-files/.env.docker
    # override env vars here
    environment:
      QUADRATIC_API_URI: http://host.docker.internal:8000
      RUST_LOG: info
    restart: "always"
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      quadratic-api:
        condition: service_started
    profiles:
      - backend
      - quadratic-multiplayer-dev
      - all
    networks:
      - host

networks:
  host:
