// This file is automatically generated by src/bin/export_types.rs
// Do not modify it manually.

export interface TransactionSummary { cell_regions_modified: Array<[SheetId, Rect]>, fill_sheets_modified: Array<SheetId>, border_sheets_modified: Array<SheetId>, code_cells_modified: Array<[SheetId, Pos]>, sheet_list_modified: boolean, cursor: string | null, }
export type RangeRef = { "type": "RowRange", start: CellRefCoord, end: CellRefCoord, } | { "type": "ColRange", start: CellRefCoord, end: CellRefCoord, } | { "type": "CellRange", start: CellRef, end: CellRef, } | { "type": "Cell", pos: CellRef, };
export interface CellRef { x: CellRefCoord, y: CellRefCoord, }
export type CellRefCoord = { "type": "Relative", "coord": bigint } | { "type": "Absolute", "coord": bigint };
export interface CellBorders { h?: CellBorder, v?: CellBorder, }
export type CellBorderStyle = "line1" | "line2" | "line3" | "dotted" | "dashed" | "double";
export interface CellBorder { color?: string, type?: CellBorderStyle, }
export type GridBounds = { "type": "empty" } | { "type": "nonEmpty" } & Rect;
export type CellAlign = "center" | "left" | "right";
export type CellWrap = "overflow" | "wrap" | "clip";
export interface NumericFormat { type: NumericFormatKind, symbol: string | null, }
export type NumericFormatKind = "NUMBER" | "CURRENCY" | "PERCENTAGE" | "EXPONENTIAL";
export interface BoolSummary { isAnyTrue: boolean, isAnyFalse: boolean, }
export interface SheetId { id: string, }
export interface RowId { id: string, }
export interface ColumnId { id: string, }
export interface CellRef { sheet: SheetId, column: ColumnId, row: RowId, }
export interface JsRenderCell { x: bigint, y: bigint, value: string, language?: CodeCellLanguage, align?: CellAlign, wrap?: CellWrap, bold?: boolean, italic?: boolean, textColor?: string, fillColor?: string, }
export interface JsRenderFill { x: bigint, y: bigint, w: number, h: number, color: string, }
export interface JsRenderBorder { x: bigint, y: bigint, w?: number, h?: number, style: CellBorder, }
export interface FormattingSummary { bold: BoolSummary, italic: BoolSummary, }
export interface CellFormatSummary { bold: boolean | null, italic: boolean | null, textColor: string | null, fillColor: string | null, }
export interface JsRenderCodeCell { x: bigint, y: bigint, w: number, h: number, language: CodeCellLanguage, state: JsRenderCodeCellState, }
export type JsRenderCodeCellState = "NotYetRun" | "RunError" | "SpillError" | "Success";
export type Axis = "X" | "Y";
export interface Instant { seconds: number, }
export interface Duration { years: number, months: number, seconds: number, }
export interface JsCodeResult { cells_accessed: Array<Array<bigint>>, success: boolean, error_span: Array<number> | null, error_msg: string | null, output_value: string | null, array_output: Array<Array<string>> | null, }
export interface JsFormulaParseResult { parse_error_msg: string | null, parse_error_span: Span | null, cell_refs: Array<JsCellRefSpan>, }
export interface JsCellRefSpan { span: Span, cell_ref: RangeRef, }
export interface Error { span: Span | null, msg: ErrorMsg, }
export type ErrorMsg = { "type": "Unimplemented" } | { "type": "UnknownError" } | { "type": "InternalError" } & string | { "type": "Unterminated" } & string | { "type": "Expected", expected: string, got: string | null, } | { "type": "Unexpected" } & string | { "type": "TooManyArguments", func_name: string, max_arg_count: number, } | { "type": "MissingRequiredArgument", func_name: string, arg_name: string, } | { "type": "BadFunctionName" } | { "type": "BadCellReference" } | { "type": "BadNumber" } | { "type": "ExactArraySizeMismatch", expected: ArraySize, got: ArraySize, } | { "type": "ExactArrayAxisMismatch", axis: Axis, expected: number, got: number, } | { "type": "ArrayAxisMismatch", axis: Axis, expected: number, got: number, } | { "type": "EmptyArray" } | { "type": "NonRectangularArray" } | { "type": "NonLinearArray" } | { "type": "ArrayTooBig" } | { "type": "CircularReference" } | { "type": "Overflow" } | { "type": "DivideByZero" } | { "type": "NegativeExponent" } | { "type": "NotANumber" } | { "type": "Infinity" } | { "type": "IndexOutOfBounds" } | { "type": "NoMatch" } | { "type": "InvalidArgument" };
export interface Pos { x: bigint, y: bigint, }
export interface Rect { min: Pos, max: Pos, }
export interface Span { start: number, end: number, }
