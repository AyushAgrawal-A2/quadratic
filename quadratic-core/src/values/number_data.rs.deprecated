use crate::values::{Deserialize, Serialize};
use bigdecimal::num_bigint::BigInt;
use bigdecimal::BigDecimal;
use std::fmt;

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub struct NumberData {
    pub value: BigDecimal,
}

impl NumberData {
    pub fn new(big_int: BigInt, exponent: i64) -> Self {
        NumberData {
            value: BigDecimal {
                int_val: big_int,
                scale: exponent,
            },
        }
    }

    pub fn zero() -> Self {
        NumberData {
            value: BigDecimal::from(0),
        }
    }

    pub fn parse(s: &str) -> Option<Self> {
        if let Some(value) = BigDecimal::parse_bytes(s.as_bytes(), 10) {
            Some(NumberData { value })
        } else {
            None
        }
    }
}

impl<'a> Div<&'a NumberData> for NumberData {
    type Output = NumberData;

    #[inline]
    fn div(mut self, rhs: &NumberData) -> NumberData {
        self.value /= rhs;
        self
    }
}

impl fmt::Display for NumberData {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.value)
    }
}
