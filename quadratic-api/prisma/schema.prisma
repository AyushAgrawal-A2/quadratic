generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           Int            @id @default(autoincrement())
    auth0_id     String         @unique
    files        File[]
    QFeedback    QFeedback[]
    UserTeamRole UserTeamRole[]
    UserFileRole UserFileRole[]
}

enum LinkPermission {
    NOT_SHARED
    READONLY
    EDIT
}

// TODO Properly configure camelCase <-> snake_case
model File {
    id               Int            @id @default(autoincrement())
    uuid             String         @unique @default(uuid())
    name             String
    thumbnail        String? // S3FileKey
    created_date     DateTime       @default(now()) // TODO map("created_date")
    updated_date     DateTime       @default(now()) // TODO map("updated_date")
    deleted          Boolean        @default(false)
    deleted_date     DateTime?
    // Binary file contents
    contents         Bytes
    // Permissions
    owner            User           @relation(fields: [ownerUserId], references: [id]) // TODO: rename to `creator`
    ownerUserId      Int
    team             Team?          @relation(fields: [teamId], references: [id])
    teamId           Int?           @map("team_id")
    publicLinkAccess LinkPermission @default(NOT_SHARED) @map("public_link_access")
    // analytics fields
    times_updated    Int            @default(1)
    version          String?
    UserFileRole     UserFileRole[]
    FileInvite       FileInvite[]
}

model Team {
    id           Int            @id @default(autoincrement())
    uuid         String         @unique @default(uuid())
    name         String
    picture      String? // S3FileKey
    createdDate  DateTime       @default(now()) @map("created_date")
    UserTeamRole UserTeamRole[]
    TeamInvite   TeamInvite[]
    File         File[]
}

enum TeamRole {
    OWNER
    EDITOR
    VIEWER
}

model UserTeamRole {
    id          Int      @id @default(autoincrement())
    userId      Int      @map("user_id")
    teamId      Int      @map("team_id")
    user        User     @relation(fields: [userId], references: [id])
    team        Team     @relation(fields: [teamId], references: [id])
    role        TeamRole
    createdDate DateTime @default(now()) @map("created_date")

    @@unique([userId, teamId])
}

model TeamInvite {
    id          Int      @id @default(autoincrement())
    email       String
    teamId      Int      @map("team_id")
    team        Team     @relation(fields: [teamId], references: [id])
    role        TeamRole
    createdDate DateTime @default(now()) @map("created_date")

    @@unique([email, teamId])
}

enum FileRole {
    // TODO: OWNER isn't really used ATM on here because it's defined on the File itself
    OWNER
    EDITOR
    VIEWER
}

model UserFileRole {
    id          Int
    userId      Int
    fileId      Int
    user        User     @relation(fields: [userId], references: [id])
    file        File     @relation(fields: [fileId], references: [id])
    role        FileRole
    createdDate DateTime @default(now()) @map("created_date")

    @@unique([userId, fileId])
}

model FileInvite {
    id          Int      @id @default(autoincrement())
    email       String
    fileId      Int      @map("file_id")
    file        File     @relation(fields: [fileId], references: [id])
    role        FileRole
    createdDate DateTime @default(now()) @map("created_date")

    @@unique([email, fileId])
}

// Future: folders
// model Folder {
//     id             Int      @id @default(autoincrement())
//     uuid           String   @unique @default(uuid())
//     name           String
//     createdDate    DateTime @default(now()) @map("created_date")
//     createdBy      User     @relation(fields: [createByUserId], references: [id])
//     createByUserId Int      @map("created_by_user_id")
//     team           Team?    @relation(fields: [teamId], references: [id])
// }
// enum FolderRole {}
// model UserFolderRole {}

model QFeedback {
    id           Int      @id @default(autoincrement())
    feedback     String
    created_date DateTime @default(now())
    qUserId      Int? // Linked to the old QUser object
    userId       Int?
    user         User?    @relation(fields: [userId], references: [id])
}

// !!Legacy user model
// use User instead
model QUser {
    id            Int     @id @default(autoincrement())
    auth0_user_id String? @unique
    QFile         QFile[]
}

// !!Legacy user model
// use File instead
model QFile {
    id            Int      @id @default(autoincrement())
    uuid          String   @unique @default(uuid())
    user_owner    QUser    @relation(fields: [qUserId], references: [id])
    name          String
    contents      Json
    created_date  DateTime @default(now())
    updated_date  DateTime @default(now())
    qUserId       Int
    // analytics fields
    times_updated Int      @default(1)
    version       String?
}
