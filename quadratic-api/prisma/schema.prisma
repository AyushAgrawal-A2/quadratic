generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           Int            @id @default(autoincrement())
    auth0_id     String         @unique
    files        File[]
    QFeedback    QFeedback[]
    UserTeamRole UserTeamRole[]
}

enum LinkPermission {
    NOT_SHARED
    READONLY
    EDIT
}

// TODO Properly configure camelCase <-> snake_case
model File {
    id                 Int              @id @default(autoincrement())
    uuid               String           @unique @default(uuid())
    name               String
    thumbnail          String? // S3FileKey
    created_date       DateTime         @default(now())
    updated_date       DateTime         @default(now())
    deleted            Boolean          @default(false)
    deleted_date       DateTime?
    // Binary file contents
    contents           Bytes
    // Permissions
    owner              User             @relation(fields: [ownerUserId], references: [id])
    ownerUserId        Int
    public_link_access LinkPermission   @default(NOT_SHARED)
    // analytics fields
    times_updated      Int              @default(1)
    version            String?
    FileCheckpoint     FileCheckpoint[]
}

model FileCheckpoint {
    // Unique Identifiers
    id             Int      @id @default(autoincrement())
    file           File     @relation(fields: [fileId], references: [id])
    fileId         Int      @map("file_id")
    sequenceNumber Int      @map("sequence_number")
    // Checkpoint Data
    data           String // S3FileKey
    version        String // Quadratic file version
    // Metadata
    timestamp      DateTime @default(now())

    @@unique([fileId, sequenceNumber])
}

model Team {
    id           Int            @id @default(autoincrement())
    uuid         String         @unique @default(uuid())
    name         String
    picture      String? // S3FileKey
    createdDate  DateTime       @default(now()) @map("created_date")
    UserTeamRole UserTeamRole[]
    TeamInvite   TeamInvite[]
}

enum TeamRole {
    OWNER
    EDITOR
    VIEWER
}

model UserTeamRole {
    id          Int      @id @default(autoincrement())
    userId      Int      @map("user_id")
    teamId      Int      @map("team_id")
    user        User     @relation(fields: [userId], references: [id])
    team        Team     @relation(fields: [teamId], references: [id])
    role        TeamRole
    createdDate DateTime @default(now()) @map("created_date")

    @@unique([userId, teamId])
}

model TeamInvite {
    id          Int      @id @default(autoincrement())
    email       String
    teamId      Int      @map("team_id")
    team        Team     @relation(fields: [teamId], references: [id])
    role        TeamRole
    createdDate DateTime @default(now()) @map("created_date")

    @@unique([email, teamId])
}

// enum SharePermission {
//     READONLY
//     EDIT
// }

// model UserFileAccess {
//   id Int
//   userId    Int
//   fileId    Int
//   user      User      @relation(fields: [userId], references: [id])
//   file      File      @relation(fields: [fileId], references: [id])
//   permission SharePermission @default(READONLY)

//   @@unique([userId, fileId])
// }

// model TeamFileAccess {
//   id Int
//   teamID    Int
//   fileId    Int
//   team      Team      @relation(fields: [teamID], references: [id])
//   file      File      @relation(fields: [fileId], references: [id])
//   permission SharePermission @default(READONLY)

//   @@unique([userId, fileId])
// }

// Permission Logic
// Public Link Access: Check the share_link column in the files table.
// Direct User Access: Check for a row in UserFileAccess with the user's ID.
// Team Access: Check for a row in TeamFileAccess with a team ID that the user is a part of.

model QFeedback {
    id           Int      @id @default(autoincrement())
    feedback     String
    created_date DateTime @default(now())
    qUserId      Int? // Linked to the old QUser object
    userId       Int?
    user         User?    @relation(fields: [userId], references: [id])
}

// !!Legacy user model
// use User instead
model QUser {
    id            Int     @id @default(autoincrement())
    auth0_user_id String? @unique
    QFile         QFile[]
}

// !!Legacy user model
// use File instead
model QFile {
    id            Int      @id @default(autoincrement())
    uuid          String   @unique @default(uuid())
    user_owner    QUser    @relation(fields: [qUserId], references: [id])
    name          String
    contents      Json
    created_date  DateTime @default(now())
    updated_date  DateTime @default(now())
    qUserId       Int
    // analytics fields
    times_updated Int      @default(1)
    version       String?
}
